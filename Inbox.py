from pickle import *
from random import randint
import vk_api.vk_api
from transliterate import translit
from Constantes import Constantes as cst
from Keyboards import *
from Process import *
import pendulum

class Inbox:
    def __init__(self, session, event, base, stat):
        self.base = base
        self.stat = stat
        self.vk = session
        self.upload = vk_api.VkUpload(self.vk)
        self.vk_api = self.vk.get_api()

        self.nums = [str(i) for i in range(5, 12)]
        self.literas = ['–∞', '–±', '–≤', '–≥']

        self.peer_id = event.obj.peer_id
        if self.peer_id == cst.console_id:
            self.console(event)
        elif self.peer_id in cst.admins:
            self.user(event, True)
        else:
            self.user(event)
        self.write_base()

    def user(self, event, a=False):
        u_id = self.peer_id
        msg = event.obj.text.lower()
        name, last = self.u_get(u_id)
        if u_id not in cst.admins:
            self.send_msg(cst.console_id, f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: @id{u_id}({name} {last}) ('
                                          f'{self.base[u_id][2]})\n'
                                           f'{event.obj.text}')
            print(translit(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: @id{u_id}({name} {last})\n{event.obj.text}',
                           reversed=True))
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if u_id not in self.base.keys():
            self.base.update({u_id: [name, last, 'Ns', 0]})
            self.stat['users'] = self.stat.get('users', 0) + 1
            self.write_base()
            self.send_msg(u_id, f'–ü—Ä–∏–≤–µ—Ç, {name}! –î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –±–æ—Ç–∞ –ø–æ–¥ —Ç–µ–±—è. –¢–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ '
                                f'—É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –∫–ª–∞—Å—Å')
            self.send_msg(cst.console_id, f'–ù–æ–≤—ã–π —é–∑–µ—Ä!\n–í—Å—Ç—Ä–µ—á–∞–π—Ç–µ - @id{u_id}({name} {last})')
            Keyboards(self.vk_api).class_keyboard(u_id)
        else:
            # –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞:
            if (msg in self.nums) and (self.base[u_id][3] == 0):
                self.base[u_id][2] = msg
                self.base[u_id][3] = 1
                self.write_base()
                if msg in ['5', '10', '11']:
                    Keyboards(self.vk_api).litera_keyboard(u_id, True)
                else:
                    Keyboards(self.vk_api).litera_keyboard(u_id, False)
            # –í—ã–±–æ—Ä –ª–∏—Ç–µ—Ä—ã:
            elif (msg in self.literas) and (self.base[u_id][3] == 1):
                self.base[u_id][2] += msg
                self.base[u_id][3] = 2
                self.write_base()
                self.send_msg(u_id, f'–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ {self.base[u_id][2].upper()} –∫–ª–∞—Å—Å! '
                                    f'–≠—Ç–æ—Ç –≤—ã–±–æ—Ä –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö')
                if a:
                    Keyboards(self.vk_api).admin_keyboard(u_id)
                else:
                    Keyboards(self.vk_api).menu_keyboard(u_id)
            # –ü–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–µ–∑ –∫–ª–∞—Å—Å–∞:
            elif msg == '–±–µ–∑ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞':
                self.base[u_id][2] = ''
                self.base[u_id][3] = 2
                self.write_base()
                self.send_msg(u_id, 'üôÅ –ë–µ–∑ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª. –ù–æ '
                                    '–µ–≥–æ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö üòâ')
                Keyboards(self.vk_api).menu_keyboard(u_id, False)
            # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            elif self.base[u_id][3] == 2:
                if msg == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
                    self.stat['requests'] = self.stat.get('requests', 0) + 1
                    self.write_base()
                    if path.exists(f'{get_date()}/{self.base[u_id][2].upper()}.png'):
                        self.photo(u_id, f'{get_date()}/{self.base[u_id][2].upper()}.png',
                                   f'–î–µ—Ä–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ '
                                   f'{self.base[u_id][2].upper()} '
                                   f'–∫–ª–∞—Å—Å–∞ –Ω–∞ {get_date()} ‚ò∫')
                    else:
                        self.send_msg(u_id, f'–°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {get_date()} '
                                            f'üòâ\n–ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥, —Ç–æ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, '
                                            f'–≤—Å–µ –∏–¥–µ—Ç –ø–æ –ø–ª–∞–Ω—É!')
                        SF()
                        try:
                            self.photo(u_id, f'{get_date()}/{self.base[u_id][2].upper()}.png',
                                       f'–î–µ—Ä–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ {self.base[u_id][2].upper()} '
                                       f'–∫–ª–∞—Å—Å–∞ –Ω–∞ {get_date()} ‚ò∫')
                        except:
                            self.send_msg(u_id, f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò≤\n–Ø –Ω–µ –Ω–∞—à–µ–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'
                                                f' {self.base[u_id][2].upper()} –∫–ª–∞—Å—Å–∞ –Ω–∞ '
                                                f'{get_date()} üò∞')
                # –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                elif msg == '–æ–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
                    self.stat['requests'] = self.stat.get('requests', 0) + 1
                    self.write_base()
                    if not path.exists(f'source/{get_date()}.png'):
                        get_picture(get_date(), '1')
                    self.photo(u_id, f'source/{get_date()}.png', f'–î–µ—Ä–∂–∏ –æ–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'
                                                                 f' –Ω–∞ {get_date()} üòä')
                elif msg == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤':
                    self.sch(u_id)
                elif msg == '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏':
                    Keyboards(self.vk_api).service_keyboard(u_id)
                elif msg == '—Å–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å':
                    Keyboards(self.vk_api).class_keyboard(u_id)
                    self.base[u_id][3] = 0
                elif msg == '–Ω–∞–∑–∞–¥':
                    if a:
                        Keyboards(self.vk_api).admin_keyboard(u_id)
                    else:
                        Keyboards(self.vk_api).menu_keyboard(u_id)
                elif msg == '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
                    if u_id in cst.admins:
                        u = '–°–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤:\n'
                        for i in self.base.keys():
                            if i < 2000000000:
                                u += f'@id{i}({self.base[i][0]} {self.base[i][1]}) - ' \
                                     f'{self.base[i][2].upper()}\n'
                            else:
                                u += f'–ë–µ—Å–µ–¥–∞ {i} - {self.base[i].upper()}\n'
                        self.send_msg(u_id, u)
                    else:
                        self.send_msg(u_id, '–ê —Ç—ã —Ç–æ—á–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä? üôÉ\n–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ '
                                            '—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!')
                elif msg == '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
                    if u_id in cst.admins:
                        self.send_msg(u_id, f'–ß–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: '
                                            f'{self.stat["requests"]}\n–ß–∏—Å–ª–æ —é–∑–µ—Ä–æ–≤:'
                                            f' {self.stat["users"]}\n'
                                            f'–ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏–ª–∏: {self.stat["thank"]}')
                    else:
                        self.send_msg(u_id, '–ê —Ç—ã —Ç–æ—á–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä? üôÉ\n–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ '
                                            '—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!')
                elif msg == '–æ–±–Ω–æ–≤–∏—Ç—å':
                    if u_id in cst.admins:
                        SF()
                        self.send_msg(u_id, '–û–±–Ω–æ–≤–ª–µ–Ω–æ! –û—à–∏–±–∫–∏ —Å–º–æ—Ç—Ä–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏')
                    else:
                        self.send_msg(u_id, '–ê —Ç—ã —Ç–æ—á–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä? üôÉ\n–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ '
                                            '—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!')
                elif '–æ–±—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ª—Å' in msg:
                    if u_id in cst.admins:
                        ms = event.obj.text[18:]
                        for i in self.base.keys():
                            self.send_msg(i, ms)
                    else:
                        self.send_msg(u_id, '–ê —Ç—ã —Ç–æ—á–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä? üôÉ\n–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ '
                                            '—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!')
                elif '—Ä–∞—Å—Å—ã–ª–∫–∞ –∫–ª–∞—Å—Å' in msg:
                    if u_id in cst.admins:
                        cls, text = event.obj.text[15:].split('_')
                        print(cls)
                        for i in self.base.keys():
                            if self.base[i][2] == cls.lower():
                                self.send_msg(i, text)
                    else:
                        self.send_msg(u_id, '–ê —Ç—ã —Ç–æ—á–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä? üôÉ\n–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ '
                                            '—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!')
                elif msg == '–Ω–∞ –∑–∞–≤—Ç—Ä–∞':
                    if u_id in cst.admins:
                        try:
                            self.send_msg(u_id, '–ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞')
                            print(pendulum.tomorrow().date().__format__('DD.MM.YYYY'))
                            SF('all', get_date(pendulum.tomorrow().date().__format__('DD.MM.YYYY')))
                            self.send_msg(u_id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!')
                        except:
                            self.send_msg(u_id, '–û—à–∏–±–∫–∞! –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –ø—Ä–æ—Å—Ç–æ '
                                                '–Ω–µ—Ç...')
                    else:
                        self.send_msg(u_id, '–ê —Ç—ã —Ç–æ—á–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä? üôÉ\n–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ '
                                            '—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!')
                elif msg in 'üòÄüòÄüòÉüòÑüòÅüòÖüòÇü§£‚ò∫üòäüòáüôÇüôÉüòâüòåüòçü•∞üòòüòóüòôüòöüòãüòõüòùüòúü§™ü§®üßêü§ìüòéü§©ü•≥üòè' \
                            '‚úåüèΩ‚úåüèæ‚úåüèøüëçüèΩüëçüèæüëçüèøü§≤üèΩü§≤üèøü§≤üèæüëåüèΩüëåüèæüëåüèøüôèüèΩüôèüèæüôèüèø‚úäüèΩ‚úäüèæ‚úäüèøüëãüèΩüëãüèæüëãüèø‚òùüèΩ‚òùüèæ‚òùüèøüëéüèΩüëéüèæüëéüèøüëèüèΩüëèüèæüëèüèøüñêüèΩüñêüèæüñêüèøüëäüèΩ' \
                            'üëäüèæüëäüèøü§ôüèΩü§ôüèæü§ôüèøü§öüèΩü§öüèæü§öüèøü§ûüèΩü§ûüèæü§ûüèø' \
                            'üë∫ü§°üí©üëªüíÄ‚ò†üëΩüëæü§ñüéÉüò∫üò∏üòπüòªüòºüòΩ' \
                            'ü§ùüëçüèøüëéüèøüëäüèø‚úäüèæü§õüèæü§úüèæü§ûüèæ‚úåüèæü§üüèæü§òüèæüëåüèøüëàüèøüëâüèøüëÜüèøüëáüèø‚òùüèø‚úãüèøü§öüèæüñêüèæüññüèæüëãüèæü§ôüèæüí™üèæ' \
                            '‚ù§üß°üíõüíöüíôüíúüíî‚ù£üíïüíûüíìüíóüíñüíüüíùüíò':
                    self.send_msg(u_id, 'üòúüòÄüòÑüòâüòäüòòüòçüòÉüòÄüòé‚úåüèªüò∫üò∏'[randint(0, 13)])
                elif '—Å–ø–∞—Å–∏–±–æ' in msg or '—Å–ø—Å' in msg or '–ø–∞—Å–∏–±' in msg or '—Å–µ–Ω–∫—Å' in msg or 'thank' \
                        in msg or '–æ—Ç –¥—É—à–∏' in msg or '–±–ª–∞–≥–æ–¥–∞—Ä—é' in msg:
                    self.stat['thank'] = self.stat.get('thank', 0) + 1
                    answ = ['–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üòâ',
                            '–°—Ç–∞—Ä–∞–µ–º—Å—è –¥–ª—è –≤–∞—Å! üòÄ',
                            '–° –ª—é–±–æ–≤—å—é, ScheduleFlow ü•∞',
                            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –û–±—Ä–∞—â–∞–π—Å—è –µ—â–µ ü§ó',
                            '–í—Å–µ–≥–¥–∞ –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º üôÇ',
                            '–†–∞–¥ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º üòâ']
                    self.send_msg(u_id, answ[randint(0, 5)])
                elif '–¥–∞—Ä–æ–≤–∞' in msg:
                    self.send_msg(u_id, '–ù—É –¥–∞—Ä–æ–≤–∞, –∫–∞—Ä–æ–≤–∞')
                else:
                    if 13 >= len(msg) >= 2:
                        if len(msg) == 2 or len(msg) == 3:
                            cls = msg.upper()
                            if cls in cst.classes:
                                if path.exists(f'{get_date()}/{cls}.png'):
                                    self.photo(u_id, f'{get_date()}/{cls}.png',
                                               f'–î–µ—Ä–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ {cls} '
                                               f'–∫–ª–∞—Å—Å–∞ –Ω–∞ {get_date()} üòÉ')
                                else:
                                    self.send_msg(u_id, f'–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ {cls} '
                                                        f'–∫–ª–∞—Å—Å–∞ –Ω–∞ {get_date()} üò∞')
                        elif ',' in msg and '.' in msg:
                            cls, date = msg.replace(' ', '').split(',', maxsplit=1)
                            date += '.' + str(pendulum.now().year)
                            d, m, y = [int(i) for i in date.split('.')]
                            date = pendulum.date(y, m, d).__format__('DD.MM.YYYY')
                            cls = cls.upper()
                            if cls in cst.classes:
                                try:
                                    SF(cls, date)
                                    self.photo(u_id, f'{date}/{cls}.png', f'–î–µ—Ä–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ {cls} '
                                                                          f'–∫–ª–∞—Å—Å–∞ –Ω–∞ {date} ü§ó')
                                except:
                                    self.send_msg(u_id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ª–∏–±–æ –¥–∞—Ç—ã {date} –Ω–µ '
                                                        f'–±—ã–≤–∞–µ—Ç üò∞\n–°—Å—ã–ª–∫–∞ –Ω–∞ '
                                                        f'—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ: https://vk.cc/9UO0Pl')
                            else:
                                self.send_msg(u_id, f'–ù–µ—Ç –∫–ª–∞—Å—Å–∞ {cls} üò¶')

    def console(self, event):
        # Keyboards(self.vk_api).conslole_keyboard()
        msg = event.obj.text.lower().replace('@', '')
        if msg == '[club187161295|scheduleflow] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
            u = '–°–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤:\n'
            for i in self.base.keys():
                if i < 2000000000:
                    u += f'@id{i}({self.base[i][0]} {self.base[i][1]}) - ' \
                         f'{self.base[i][2].upper()}\n'
                else:
                    u += f'–ë–µ—Å–µ–¥–∞ {i} - {self.base[i][2].upper()}\n'
            self.send_msg(cst.console_id, u)
        elif msg == '[club187161295|scheduleflow] –∑–∞–≥—Ä—É–∑–∏—Ç—å':
            if path.exists(f'{get_date()}'):
                self.send_msg(cst.console_id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏!')
            else:
                self.send_msg(cst.console_id, f'–ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –•–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è '
                                               f'–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏.')
                SF()
                self.send_msg(cst.console_id, f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {get_date()} –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –û—à–∏–±–∫–∏ '
                                               f'–≤—ã—à–µ')
        elif msg == '[club187161295|scheduleflow] –æ–±–Ω–æ–≤–∏—Ç—å':
            SF()
            self.send_msg(cst.console_id, f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {get_date()} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!')
        elif msg == '[club187161295|scheduleflow] —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            self.send_msg(cst.console_id, f'–ß–∏—Å–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: '
                                           f'{self.stat["requests"]}\n–ß–∏—Å–ª–æ —é–∑–µ—Ä–æ–≤: '
                                           f'{self.stat["users"]}')
        elif msg == '[club187161295|scheduleflow] –Ω–∞ –∑–∞–≤—Ç—Ä–∞':
            try:
                self.send_msg(cst.console_id, '–ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞')
                print(pendulum.tomorrow().date().__format__('DD.MM.YYYY'))
                SF('all', get_date(pendulum.tomorrow().date().__format__('DD.MM.YYYY')))
                self.send_msg(cst.console_id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!')
            except:
                self.send_msg(cst.console_id, '–û—à–∏–±–∫–∞! –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –ø—Ä–æ—Å—Ç–æ '
                                              '–Ω–µ—Ç...')
        elif '–æ–±—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ª—Å' in msg:
            ms = event.obj.text[18:]
            print(translit(ms))
            for i in self.base.keys():
                if i < 2000000000:
                    self.send_msg(i, ms)
        elif '–æ–±—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ' in msg:
            ms = event.obj.text[19:]
            print(translit(ms))
            for i in self.base.keys():
                self.send_msg(i, ms)

    def write_base(self):
        pt = 'data/base.pickle'
        with open(pt, 'wb') as fi:
            dump(self.base, fi)

        pt = 'data/stat.pickle'
        with open(pt, 'wb') as fi:
            dump(self.stat, fi)

    def open_base(self):
        pt = 'data/base.pickle'
        with open(pt, 'rb') as fi:
            self.base = load(fi)

        pt = 'data/stat.pickle'
        with open(pt, 'wb') as fi:
            self.stat = load(fi)

    def photo(self, send_id, root='img.png', msg=''):
        response = self.upload.photo_messages(root)[0]
        attachment = f'photo{response["owner_id"]}_{response["id"]}_{response["access_key"]}'
        self.vk_api.messages.send(peer_id=send_id,
                                  message=msg,
                                  random_id=get_random_id(),
                                  attachment=attachment)

    def sch(self, send_id):
        if pendulum.now().weekday() == 0:
            s = 'photo-187161295_457240000'
        elif pendulum.now().weekday() != 6:
            s = 'photo-187161295_457240001'
        else:
            s = 0
            self.send_msg(send_id, '–ü–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º –Ω–µ —É—á–∏–º—Å—è üòâ')
        if s:
            self.vk_api.messages.send(peer_id=send_id,
                                      message='–î–µ—Ä–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üòâ',
                                      random_id=get_random_id(),
                                      attachment=s)

    def send_msg(self, send_id, message):
        self.vk_api.messages.send(peer_id=send_id,
                                  message=message,
                                  random_id=get_random_id())

    def u_get(self, uid):
        info = self.vk_api.users.get(user_ids=uid)[0]
        return info['first_name'], info['last_name']
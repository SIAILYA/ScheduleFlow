import json
from os import path, listdir, remove
from pickle import load
from random import randint

import apiai as apiai
import pendulum
from pendulum import *
from vk_api import VkUpload
from vk_api.utils import get_random_id

from Base import *
from Constantes import Constantes as cst
from Keyboards import Keyboards
from Process import download_all
from Rings import ring_schedule
from Utilities import gratitude, smile


def saturday():
    if pendulum.tomorrow(tz='Europe/Moscow').day == 31:
        return pendulum.date(pendulum.tomorrow().year, pendulum.tomorrow().month + 1, 1).__format__('DD.MM.YYYY')
    elif pendulum.tomorrow(tz='Europe/Moscow').day == 30:
        if pendulum.tomorrow().month in [2, 4, 6, 9, 11]:
            return pendulum.date(pendulum.tomorrow().year, pendulum.tomorrow().month + 1, 1).__format__('DD.MM.YYYY')
        else:
            return pendulum.date(pendulum.tomorrow().year, pendulum.tomorrow().month, 31).__format__('DD.MM.YYYY')
    else:
        return pendulum.date(pendulum.tomorrow().year, pendulum.tomorrow().month,
                             pendulum.tomorrow().day + 1).__format__('DD.MM.YYYY')


def get_schedule_date():
    hr = now(tz='Europe/Moscow').time().hour
    mt = now(tz='Europe/Moscow').time().minute
    yr = tomorrow(tz='Europe/Moscow').year
    mtt = tomorrow(tz='Europe/Moscow').month
    td = now(tz='Europe/Moscow').weekday()
    if td == 6:
        return tomorrow(tz='Europe/Moscow').date().__format__('DD.MM.YYYY')
    elif td in [0, 1, 2, 3, 4]:
        if (hr >= 13) and ((hr <= 23) and (mt <= 59)):
            return tomorrow(tz='Europe/Moscow').date().__format__('DD.MM.YYYY')
        else:
            return today(tz='Europe/Moscow').date().__format__('DD.MM.YYYY')
    else:
        if (hr >= 13) and ((hr <= 23) and (mt <= 59)):
            if tomorrow(tz='Europe/Moscow').day + 1 in [30, 31]:
                if mtt in [1, 3, 5, 7, 8, 10, 12]:
                    if tomorrow(tz='Europe/Moscow').day + 1 == 31:
                        return date(yr, mtt + 1, 1).__format__('DD.MM.YYYY')
                    else:
                        return date(yr, mtt, 31).__format__('DD.MM.YYYY')
                else:
                    if tomorrow(tz='Europe/Moscow').day + 1 == 30:
                        return date(yr, mtt + 1, 1).__format__('DD.MM.YYYY')
                    else:
                        return date(yr, mtt, 30).__format__('DD.MM.YYYY')
            else:
                return date(yr, mtt, tomorrow().day + 1).__format__('DD.MM.YYYY')
        else:
            return today(tz='Europe/Moscow').date().__format__('DD.MM.YYYY')


class User:
    def __init__(self, vk, event, base):
        self.vk = vk
        self.vk_api = self.vk.get_api()
        self.db = base
        if event.obj.text:
            self.user(event)
        else:
            self.no_text(event)
        self.schedules = {}
        self.load_schedule(get_schedule_date())

    def no_text(self, event):
        u_id = event.obj.peer_id
        name, last = self.user_get(u_id)
        if 'attachments' in event.obj.keys():
            att = event.obj.attachments
            if att[0]['type'] == 'sticker':
                self.set_activity(u_id)
                self.send_console(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: @id{u_id}({name} {last})\n–û—Ç–ø—Ä–∞–≤–∏–ª(–∞) —Å—Ç–∏–∫–µ—Ä')
                self.send_msg(u_id, cst.stickers[randint(0, 3)])
            elif att[0]['type'] == 'photo':
                pic_url = att[0]['photo']['sizes'][-1]['url']
                self.set_activity(u_id)
                self.send_console(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: @id{u_id}({name} {last})\n–û—Ç–ø—Ä–∞–≤–∏–ª(–∞) '
                                  f'–∫–∞—Ç–∏–Ω–∫—É:\n{pic_url}')
                self.send_msg(u_id, cst.pics[randint(0, 2)])
            elif att[0]['type'] == 'audio':
                self.set_activity(u_id)
                self.send_console(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: @id{u_id}({name} {last})\n–û—Ç–ø—Ä–∞–≤–∏–ª(–∞) –∞—É–¥–∏–æ')
                if randint(1, 100) > 50:
                    self.send_msg(u_id, cst.music[randint(0, 1)])
                else:
                    att = 'photo-187161295_457241548'
                    self.send_attachment(u_id, '–ê—Ö...', att)
            else:
                self.send_console(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: @id{u_id}({name} {last})\n–û—Ç–ø—Ä–∞–≤–∏–ª(–∞) –∫–∞–∫–æ–µ-—Ç–æ '
                                  f'–Ω–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')
        else:
            self.send_console(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: @id{u_id}({name} {last})\n–û—Ç–ø—Ä–∞–≤–∏–ª(–∞) –∫–∞–∫–æ–µ-—Ç–æ '
                              f'–Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')

    def user(self, event):
        u_id = event.obj.peer_id
        self.set_activity(u_id)
        msg = event.obj.text.lower()
        if u_id not in [i[0] for i in get_all_ids(self.db)]:
            name, last = self.user_get(u_id)
            self.send_msg(u_id, f'–ü—Ä–∏–≤–µ—Ç, {name}! –î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –±–æ—Ç–∞ –ø–æ–¥ —Ç–µ–±—è.\n–¢–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ '
                                f'—É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –∫–ª–∞—Å—Å')
            self.send_console(f'‚úÖ –ù–æ–≤—ã–π —é–∑–µ—Ä!\n–í—Å—Ç—Ä–µ—á–∞–π—Ç–µ: @id{u_id}({name} {last})')
            Keyboards(self.vk_api).class_keyboard(u_id)
            new_user(self.db, u_id, name, last)
        else:
            if (msg in '5 6 7 8 9 10 11') and (get_state(self.db, u_id) == 0):
                set_class_num(self.db, u_id, int(msg))
                set_state(self.db, u_id, 1)
                if msg in ['5', '10', '11']:
                    Keyboards(self.vk_api).litera_keyboard(u_id, True)
                else:
                    Keyboards(self.vk_api).litera_keyboard(u_id, False)
            elif (msg in '–∞–±–≤–≥') and (get_state(self.db, u_id) == 1):
                name, last = self.user_get(u_id)
                set_class_lit(self.db, u_id, msg.upper())
                set_state(self.db, u_id, 2)
                self.send_msg(u_id, f'–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ {get_cls(self.db, u_id).upper()} –∫–ª–∞—Å—Å!\n'
                                    f'–≠—Ç–æ—Ç –≤—ã–±–æ—Ä –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö')
                self.send_console(
                    f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{u_id}({name} {last}) –≤—ã–±—Ä–∞–ª {get_cls(self.db, u_id).upper()} –∫–ª–∞—Å—Å')
                Keyboards(self.vk_api).menu_keyboard(u_id)
            elif msg == '–±–µ–∑ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞':
                set_state(self.db, u_id, 2)
                self.send_msg(u_id, 'üôÅ–ë–µ–∑ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª. –ù–æ '
                                    '–µ–≥–æ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö üòâ')
                Keyboards(self.vk_api).menu_keyboard(u_id, False)
            elif get_state(self.db, u_id) == 2:
                name, last, cls, requests = get_by_id(self.db, u_id)[0]
                # if need_out(msg) and u_id not in cst.admins:
                #     self.send_console(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: @id{u_id}({name} {last}) ({cls}):\n'
                #                       f'{event.obj.text}')
                if '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞' in msg:
                    increase_requests(self.db, u_id)
                    try:
                        d, m = list(map(int, msg.lstrip('—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞').split('.')))
                        all_date = pendulum.date(pendulum.now().year, m, d).__format__('DD.MM.YYYY')
                        print(all_date)
                        self.load_schedule(all_date)
                        if path.exists(f'uploaded_photo/{all_date}.sf'):
                            self.send_attachment(u_id, f'–î–µ—Ä–∂–∏ –æ–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {all_date} {cst.smiles_answer[randint(0, 13)]}',
                                                 self.schedules['main'])
                        else:
                            dates = '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 20.10"\n\n–°–ø–∏—Å–æ–∫ ' \
                                    '–¥–∞—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: \n' + \
                                    ' | '.join([s[:-9] for s in listdir('source')])
                            self.send_msg(u_id, dates)
                    except:
                        self.send_msg(u_id, cst.error)
                elif ',' in msg and '.' in msg and any([i.lower() in msg for i in cst.classes]):
                    increase_requests(self.db, u_id)
                    try:
                        cls, schedule_date = msg.split(',')
                        if cls.upper() in cst.classes:
                            d, m = list(map(int, schedule_date.split('.')))
                            schedule_date = pendulum.date(pendulum.now().year, m, d).__format__('DD.MM.YYYY')
                            if not path.exists(f'uploaded_photo/{schedule_date}.sf'):
                                self.send_msg(u_id,
                                              '–°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —Å–∞–π—Ç–∞!\n–ß—É—Ç—å-—á—É—Ç—å —Ç–µ—Ä–ø–µ–Ω–∏—è!')
                                download_all(schedule_date)
                                try:
                                    with open(f'uploaded_photo/{schedule_date}.sf', 'rb') as f:
                                        self.schedules = load(f)
                                    self.send_attachment(u_id, f'–î–µ—Ä–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ {cls.upper()} –∫–ª–∞—Å—Å–∞ –Ω–∞ '
                                                               f'{schedule_date} {cst.smiles_answer[randint(0, 13)]}',
                                                         self.schedules[cls.upper()])
                                except:
                                    dates = '–°–ø–∏—Å–æ–∫ –¥–∞—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: \n' + \
                                            ' | '.join([s[:-9] for s in listdir('source')])
                                    self.send_msg(u_id, f'–û—à–∏–±–∫–∞! –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n\n{dates}')
                            else:
                                try:
                                    with open(f'uploaded_photo/{schedule_date}.sf', 'rb') as f:
                                        self.schedules = load(f)
                                    self.send_attachment(u_id, f'–î–µ—Ä–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ {cls.upper()} –∫–ª–∞—Å—Å–∞ –Ω–∞ '
                                                               f'{schedule_date} {cst.smiles_answer[randint(0, 13)]}',
                                                         self.schedules[cls.upper()])
                                except:
                                    remove(f'uploaded_photo/{schedule_date}.sf')
                                    dates = '–°–ø–∏—Å–æ–∫ –¥–∞—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: \n' + \
                                            ' | '.join([s[:-9] for s in listdir('source')])
                                    self.send_msg(u_id, f'–û—à–∏–±–∫–∞! –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n\n{dates}')
                        else:
                            self.send_msg(u_id, f'–í—Ä—è–¥ –ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ {cls} –∫–ª–∞—Å—Å–∞...')
                    except FileNotFoundError:
                        cls, err_date = msg.split(',')
                        dates = '–°–ø–∏—Å–æ–∫ –¥–∞—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: \n' + \
                                ' | '.join([s[:-9] for s in listdir('source')])
                        self.send_msg(u_id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –Ω–∞—Å –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ {err_date}\n\n'
                                            f'{dates}')
                    except KeyError:
                        cls, err_date = msg.split(',')
                        dates = '–°–ø–∏—Å–æ–∫ –¥–∞—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: \n' + \
                                ' | '.join([s[:-9] for s in listdir('source')])
                        self.send_msg(u_id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –Ω–∞—Å –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è {cls} –∫–ª–∞—Å—Å–∞ –Ω–∞ '
                                            f'{err_date}\n\n{dates}')
                    except ValueError:
                        dates = '–°–ø–∏—Å–æ–∫ –¥–∞—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: \n' + \
                                ' | '.join([s[:-9] for s in listdir('source')])
                        self.send_msg(u_id, f'–û—à–∏–±–∫–∞! –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–ª–∏ '
                                            f'–¥–∞—Ç—É\n\n{dates}')
                elif msg == '–Ω–∞ –∑–∞–≤—Ç—Ä–∞':
                    increase_requests(self.db, u_id)
                    if pendulum.today(tz='Europe/Moscow').weekday() == 5:
                        schedule_date = saturday()
                    else:
                        schedule_date = pendulum.tomorrow(tz='Europe/Moscow').__format__('DD.MM.YYYY')

                    if not path.exists(f'uploaded_photo/{schedule_date}.sf'):
                        if path.exists(f'source/{schedule_date}.png'):
                            remove(f'source/{schedule_date}.png')
                        self.send_msg(u_id,
                                      '–°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —Å–∞–π—Ç–∞!\n–ß—É—Ç—å-—á—É—Ç—å —Ç–µ—Ä–ø–µ–Ω–∏—è!')
                        download_all(schedule_date)
                        try:
                            self.load_schedule(schedule_date)
                            if pendulum.today(tz='Europe/Moscow').weekday() != 5:
                                self.send_attachment(u_id,
                                                     f'–î–µ—Ä–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞! {cst.smiles_answer[randint(0, 13)]}',
                                                     self.schedules[get_cls(self.db, u_id)])
                            else:
                                self.send_attachment(u_id,
                                                     f'–î–µ—Ä–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫! {cst.smiles_answer[randint(0, 13)]}',
                                                     self.schedules[get_cls(self.db, u_id)])
                        except:
                            self.send_msg(
                                cst.error + '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n–ü–æ-–ø—Ä–µ–∂–Ω–µ–º—É –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—ë')
                    else:
                        try:
                            self.load_schedule(schedule_date)
                            if pendulum.today(tz='Europe/Moscow').weekday() != 5:
                                self.send_attachment(u_id,
                                                     f'–î–µ—Ä–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞! {cst.smiles_answer[randint(0, 13)]}',
                                                     self.schedules[get_cls(self.db, u_id)])
                            else:
                                self.send_attachment(u_id,
                                                     f'–î–µ—Ä–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫! {cst.smiles_answer[randint(0, 13)]}',
                                                     self.schedules[get_cls(self.db, u_id)])
                        except:
                            self.send_msg(u_id,
                                          cst.error + '\n–ü–æ-–ø—Ä–µ–∂–Ω–µ–º—É –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—ë')
                elif msg == '–Ω–∞ —Å–µ–≥–æ–¥–Ω—è':
                    increase_requests(self.db, u_id)
                    if pendulum.today(tz='Europe/Moscow').weekday() == 6:
                        self.send_msg(u_id, '–°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ!\n–ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ;-)')
                    else:
                        schedule_date = pendulum.today(tz='Europe/Moscow').__format__('DD.MM.YYYY')
                        if not path.exists(f'uploaded_photo/{schedule_date}.sf'):
                            if path.exists(f'source/{schedule_date}.png'):
                                remove(f'source/{schedule_date}.png')
                            self.send_msg(u_id,
                                          '–°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å —Å–∞–π—Ç–∞!\n–ß—É—Ç—å-—á—É—Ç—å —Ç–µ—Ä–ø–µ–Ω–∏—è!')
                            download_all(schedule_date)
                            try:
                                self.load_schedule(schedule_date)
                                self.send_attachment(u_id,
                                                     f'–î–µ—Ä–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!  {cst.smiles_answer[randint(0, 13)]}',
                                                     self.schedules[get_cls(self.db, u_id)])
                            except:
                                self.send_msg(u_id,
                                              cst.error + '\n–ü–æ-–ø—Ä–µ–∂–Ω–µ–º—É –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—ë üòâ')
                        else:
                            try:
                                self.load_schedule(schedule_date)
                                self.send_attachment(u_id,
                                                     f'–î–µ—Ä–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è! {cst.smiles_answer[randint(0, 13)]}',
                                                     self.schedules[get_cls(self.db, u_id)])
                            except:
                                self.send_msg(u_id,
                                              cst.error + '\n–ü–æ-–ø—Ä–µ–∂–Ω–µ–º—É –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—ë üòâ')
                elif msg == '–æ–±—â–µ–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è':
                    increase_requests(self.db, u_id)
                    if pendulum.today(tz='Europe/Moscow').weekday() == 6:
                        self.send_msg(u_id, '–°–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ!\n–ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ;-)')
                    else:
                        schedule_date = pendulum.today(tz='Europe/Moscow').__format__('DD.MM.YYYY')

                        self.main_schedule_by_date(u_id, schedule_date)
                elif msg == '–æ–±—â–µ–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞':
                    increase_requests(self.db, u_id)
                    if pendulum.today(tz='Europe/Moscow').weekday() == 5:
                        schedule_date = saturday()
                    else:
                        schedule_date = pendulum.tomorrow(tz='Europe/Moscow').__format__('DD.MM.YYYY')

                    self.main_schedule_by_date(u_id, schedule_date)
                elif msg == '–∑–≤–æ–Ω–∫–∏':
                    ring_schedule(self.vk_api, u_id)
                elif msg == '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏':
                    set_state(self.db, u_id, 3)
                    Keyboards(self.vk_api).service_keyboard(u_id, get_notifications(self.db, u_id))
                elif gratitude(msg):
                    increase_gratitude(self.db, u_id)
                    self.send_msg(u_id, self.dialog_flow(msg))
                elif smile(msg):
                    self.send_msg(u_id, cst.smiles_answer[randint(0, 13)])
                else:
                    answer = self.dialog_flow(msg)
                    self.send_console(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: @id{u_id}({name} {last})\n- {msg}\n- {answer}')
                    self.send_msg(u_id, answer)
            elif get_state(self.db, u_id) == 3:
                name, last, cls, requests = get_by_id(self.db, u_id)[0]
                if msg == '–ø–æ–º–æ—â—å':
                    self.send_msg(u_id, '–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—Ä–æ—Å—å–±—É –æ –ø–æ–º–æ—â–∏ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É! –ï—Å–ª–∏ '
                                        '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–µ –∑–∞–±—Ä–∞–ª–∏ –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–µ, –æ–Ω–∏ —Å–∫–æ—Ä–æ '
                                        '—Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏!\n–ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ FAQ: vk.com/@scheduleflow-faq-moi-faq')
                    self.vk_api.messages.send(user_ids=cst.admins,
                                              message=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{u_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å!'
                                                      f'\nvk.com/gim187161295?sel={u_id}',
                                              random_id=get_random_id())
                elif msg == '—Å–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å':
                    set_state(self.db, u_id, 0)
                    Keyboards(self.vk_api).class_keyboard(u_id)
                elif msg == '–Ω–∞–∑–∞–¥':
                    set_state(self.db, u_id, 2)
                    if get_cls(self.db, u_id) != 'Ns':
                        Keyboards(self.vk_api).menu_keyboard(u_id)
                    else:
                        Keyboards(self.vk_api).menu_keyboard(u_id, False)
                elif msg == '–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
                    set_notifications(self.db, u_id, 0)
                    Keyboards(self.vk_api).service_keyboard(u_id, 0, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã!')
                    self.send_console(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{u_id}({name} {last}) –≤—ã–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
                elif msg == '–≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
                    set_notifications(self.db, u_id, 1)
                    Keyboards(self.vk_api).service_keyboard(u_id, 1, '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!')
                    self.send_console(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{u_id}({name} {last}) –≤–∫–ª—é—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
                else:
                    self.send_msg(u_id, '–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É, –≤—ã–π–¥–∏—Ç–µ –∏–∑ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è üòâ')

    def send_console(self, message):
        self.vk_api.messages.send(peer_id=cst.console_id,
                                  message=message,
                                  random_id=get_random_id())

    def set_activity(self, uid):
        self.vk_api.messages.setActivity(type='typing',
                                         peer_id=uid,
                                         group_id=cst.group_id)

    def main_schedule_by_date(self, u_id, schedule_date):
        if path.exists(f'uploaded_photo/{schedule_date}.sf'):
            self.load_schedule(schedule_date)
            self.send_attachment(u_id,
                                 f'–î–µ—Ä–∂–∏ –æ–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {schedule_date} {cst.smiles_answer[randint(0, 13)]}',
                                 self.schedules['main'])
        else:
            try:
                download_all(schedule_date)
                self.load_schedule(schedule_date)
                self.send_attachment(u_id,
                                     f'–î–µ—Ä–∂–∏ –æ–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {schedule_date} {cst.smiles_answer[randint(0, 13)]}',
                                     self.schedules['main'])
            except:
                self.send_msg(u_id, cst.error)

    def send_msg(self, send_id, message):
        self.vk_api.messages.send(peer_id=send_id,
                                  message=message,
                                  random_id=get_random_id())

    def user_get(self, uid):
        info = self.vk_api.users.get(user_ids=uid)[0]
        return info['first_name'], info['last_name']

    def send_photo(self, send_id, root='img.png', msg=''):
        self.upload = VkUpload(self.vk)
        response = self.upload.photo_messages(root)[0]
        attachment = f'photo{response["owner_id"]}_{response["id"]}_{response["access_key"]}'
        self.vk_api.messages.send(peer_id=send_id,
                                  message=msg,
                                  random_id=get_random_id(),
                                  attachment=attachment)

    def send_attachment(self, send_id, msg, attachment):
        self.vk_api.messages.send(peer_id=send_id,
                                  message=msg,
                                  random_id=get_random_id(),
                                  attachment=attachment)

    def load_schedule(self, date=get_schedule_date()):
        with open(f'uploaded_photo/{date}.sf', 'rb') as f:
            self.schedules = load(f)

    def dialog_flow(self, message_text):
        request = apiai.ApiAI(cst.ai_token).text_request()
        request.lang = 'ru'
        request.session_id = 'SFTest'
        request.query = message_text
        responseJson = json.loads(request.getresponse().read().decode('utf-8'))
        response = responseJson['result']['fulfillment']['speech']
        if response:
            return response
        else:
            return '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø—Ä–æ—Å—Ç–∏'

from os import path
from random import randint

from transliterate import translit
from vk_api import VkUpload
from vk_api.utils import get_random_id

from Base import write_base
from Constantes import Constantes as cst
from Keyboards import Keyboards
from Process import download_all
from Rings import ring_schedule
from Utilities import get_schedule_date


class User:
    def __init__(self, vk, event, base, stat):
        self.vk = vk
        self.vk_api = self.vk.get_api()
        self.base = base
        self.stat = stat
        self.upload = VkUpload(self.vk)
        self.user(event)

    def user(self, event):
        u_id = event.obj.peer_id
        msg = event.obj.text.lower()
        name, last = self.u_get(u_id)
        if u_id not in cst.admins:
            if u_id in self.base.keys():
                self.send_msg(cst.console_id, f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: @id{u_id}({name} {last}) '
                                              f'({self.base[u_id][2]})\n'
                                              f'{event.obj.text}')
                print(translit(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: @id{u_id}({name} {last}) ({self.base[u_id][2]})'
                               f'\n{event.obj.text}', reversed=True))
            else:
                self.send_msg(cst.console_id, f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: @id{u_id}({name} {last})\n'
                                              f'{event.obj.text}')
                print(translit(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: @id{u_id}({name} {last})\n{event.obj.text}',
                               reversed=True))
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if u_id not in self.base.keys():
            self.base.update({u_id: [name, last, 'Ns', 0]})
            self.stat['users'] = self.stat.get('users', 0) + 1
            write_base(self.base, self.stat)
            self.send_msg(u_id, f'–ü—Ä–∏–≤–µ—Ç, {name}! –î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –±–æ—Ç–∞ –ø–æ–¥ —Ç–µ–±—è. –¢–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ '
                                f'—É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –∫–ª–∞—Å—Å')
            self.send_msg(cst.console_id, f'‚úÖ –ù–æ–≤—ã–π —é–∑–µ—Ä!\n–í—Å—Ç—Ä–µ—á–∞–π—Ç–µ - @id{u_id}({name} {last})')
            Keyboards(self.vk_api).class_keyboard(u_id)
        else:
            # –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞:
            if (msg in ['5', '6', '7', '8', '9', '10', '11']) and (self.base[u_id][3] == 0):
                self.base[u_id][2] = msg
                self.base[u_id][3] = 1
                write_base(self.base, self.stat)
                if msg in ['5', '10', '11']:
                    Keyboards(self.vk_api).litera_keyboard(u_id, True)
                else:
                    Keyboards(self.vk_api).litera_keyboard(u_id, False)
            # –í—ã–±–æ—Ä –ª–∏—Ç–µ—Ä—ã:
            elif (msg in '–∞–±–≤–≥') and (self.base[u_id][3] == 1):
                self.base[u_id][2] += msg
                self.base[u_id][3] = 2
                write_base(self.base, self.stat)
                self.send_msg(u_id, f'–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ {self.base[u_id][2].upper()} –∫–ª–∞—Å—Å!\n'
                                    f'–≠—Ç–æ—Ç –≤—ã–±–æ—Ä –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö')
                Keyboards(self.vk_api).menu_keyboard(u_id)
            # –ü–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–µ–∑ –∫–ª–∞—Å—Å–∞:
            elif msg == '–±–µ–∑ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞':
                self.base[u_id][2] = ''
                self.base[u_id][3] = 2
                write_base(self.base, self.stat)
                self.send_msg(u_id, 'üôÅ–ë–µ–∑ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª. –ù–æ '
                                    '–µ–≥–æ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö üòâ')
                Keyboards(self.vk_api).menu_keyboard(u_id, False)
            elif self.base[u_id][3] == 2:
                if msg == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
                    self.stat['requests'] = self.stat.get('requests', 0) + 1
                    write_base(self.base, self.stat)
                    if path.exists(f'uploaded_photo/{get_schedule_date()}.sf'):
                        pass
                    else:
                        self.send_msg(u_id, f'–°–µ–π—á–∞—Å –ø–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {get_schedule_date()} '
                                            f'üòâ\n–ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 20 —Å–µ–∫—É–Ω–¥, —Ç–æ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, '
                                            f'–≤—Å–µ –∏–¥–µ—Ç –ø–æ –ø–ª–∞–Ω—É!')
                        download_all()
                        try:
                            self.photo(u_id, f'{get_schedule_date()}/{self.base[u_id][2].upper()}.png',
                                       f'–î–µ—Ä–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ {self.base[u_id][2].upper()} '
                                       f'–∫–ª–∞—Å—Å–∞ –Ω–∞ {get_schedule_date()} ‚ò∫')
                        except:
                            self.send_msg(u_id, f'–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üò≤\n–Ø –Ω–µ –Ω–∞—à–µ–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'
                                                f' {self.base[u_id][2].upper()} –∫–ª–∞—Å—Å–∞ –Ω–∞ '
                                                f'{get_schedule_date()} üò∞')
                elif msg == '–æ–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
                    self.stat['requests'] = self.stat.get('requests', 0) + 1
                    write_base(self.base, self.stat)
                    if not path.exists(f'source/{get_schedule_date()}.png'):
                        get_picture(get_schedule_date(), '1')
                    self.photo(u_id, f'source/{get_schedule_date()}.png', f'–î–µ—Ä–∂–∏ –æ–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ '
                                                                          f'–Ω–∞ {get_schedule_date()} üòä')
                elif msg == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤':
                    ring_schedule(self.vk_api, u_id)
                elif msg == '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏':
                    Keyboards(self.vk_api).service_keyboard(u_id)
                elif msg == '—Å–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å':
                    Keyboards(self.vk_api).class_keyboard(u_id)
                    self.base[u_id][3] = 0
                elif msg == '–Ω–∞–∑–∞–¥':
                    Keyboards(self.vk_api).menu_keyboard(u_id)
                elif msg in cst.smiles:
                    self.send_msg(u_id, 'üòúüòÄüòÑüòâüòäüòòüòçüòÉüòÄüòé‚úåüèªüò∫üò∏'[randint(0, 13)])
                elif '—Å–ø–∞—Å–∏–±–æ' in msg or '—Å–ø—Å' in msg or '–ø–∞—Å–∏–±' in msg or '—Å–µ–Ω–∫—Å' in msg or 'thank' \
                        in msg or '–æ—Ç –¥—É—à–∏' in msg or '–±–ª–∞–≥–æ–¥–∞—Ä—é' in msg or '–º–µ—Ä—Å–∏' in msg:
                    self.stat['thank'] = self.stat.get('thank', 0) + 1
                    self.send_msg(u_id, cst.answers[randint(0, len(cst.answers) - 1)])
                elif '–¥–∞—Ä–æ–≤–∞' in msg:
                    self.send_msg(u_id, '–ù—É –¥–∞—Ä–æ–≤–∞, –∫–∞—Ä–æ–≤–∞')

                elif '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞' in msg:
                    pass

                elif ',' in msg and '.' in msg:
                    pass

    def send_console(self, message):
        self.vk_api.messages.send(peer_id=cst.console_id,
                                  message=message,
                                  random_id=get_random_id())

    def send_msg(self, send_id, message):
        self.vk_api.messages.send(peer_id=send_id,
                                  message=message,
                                  random_id=get_random_id())

    def u_get(self, uid):
        info = self.vk_api.users.get(user_ids=uid)[0]
        return info['first_name'], info['last_name']

    def photo(self, send_id, root='img.png', msg=''):
        response = self.upload.photo_messages(root)[0]
        attachment = f'photo{response["owner_id"]}_{response["id"]}_{response["access_key"]}'
        self.vk_api.messages.send(peer_id=send_id,
                                  message=msg,
                                  random_id=get_random_id(),
                                  attachment=attachment)

from os import path, listdir
from pickle import load
from random import randint

import pendulum
from vk_api import VkUpload
from vk_api.utils import get_random_id

from Base import write_base
from Constantes import Constantes as cst
from Keyboards import Keyboards
from Process import download_all
from Rings import ring_schedule
from Utilities import get_schedule_date, gratitude, smile, get_picture


class User:
    def __init__(self, vk, event, base, stat):
        self.vk = vk
        self.vk_api = self.vk.get_api()
        self.base = base
        self.stat = stat
        if event.obj.text:
            self.user(event)
        else:
            self.no_text(event)
        self.schedules = {}

    def no_text(self, event):
        u_id = event.obj.peer_id
        name, last = self.user_get(u_id)
        if 'attachments' in event.obj.keys():
            att = event.obj.attachments
            if att[0]['type'] == 'sticker':
                self.set_activity(u_id)
                self.send_console(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: @id{u_id}({name} {last})\n–û—Ç–ø—Ä–∞–≤–∏–ª(–∞) —Å—Ç–∏–∫–µ—Ä')
                self.send_msg(u_id, cst.stickers[randint(0, 3)])
            elif att[0]['type'] == 'photo':
                pic_url = att[0]['photo']['sizes'][-1]['url']
                self.set_activity(u_id)
                self.send_console(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: @id{u_id}({name} {last})\n–û—Ç–ø—Ä–∞–≤–∏–ª(–∞) '
                                  f'–∫–∞—Ç–∏–Ω–∫—É:\n{pic_url}')
                self.send_msg(u_id, cst.pics[randint(0, 2)])
            elif att[0]['type'] == 'audio':
                self.set_activity(u_id)
                self.send_console(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: @id{u_id}({name} {last})\n–û—Ç–ø—Ä–∞–≤–∏–ª(–∞) –∞—É–¥–∏–æ')
                if randint(1, 100) > 50:
                    self.send_msg(u_id, cst.music[randint(0, 1)])
                else:
                    att = 'photo-187161295_457241548'
                    self.send_attachment(u_id, '–ê—Ö...', att)
            else:
                self.send_console(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: @id{u_id}({name} {last})\n–û—Ç–ø—Ä–∞–≤–∏–ª(–∞) –∫–∞–∫–æ–µ-—Ç–æ '
                                  f'–Ω–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')
        else:
            self.send_console(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: @id{u_id}({name} {last})\n–û—Ç–ø—Ä–∞–≤–∏–ª(–∞) –∫–∞–∫–æ–µ-—Ç–æ '
                              f'–Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')

    def user(self, event):
        u_id = event.obj.peer_id
        self.set_activity(u_id)
        msg = event.obj.text.lower()
        name, last = self.user_get(u_id)
        if u_id not in cst.admins:
            if u_id in self.base.keys():
                self.send_msg(cst.console_id, f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: @id{u_id}({name} {last}) '
                                              f'({self.base[u_id][2]})\n'
                                              f'{event.obj.text}')
                # print(translit(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: @id{u_id}({name} {last}) ({self.base[u_id][2]})'
                #                f'\n{event.obj.text}', reversed=True))
            else:
                self.send_msg(cst.console_id, f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: @id{u_id}({name} {last})\n'
                                              f'{event.obj.text}')
                # print(translit(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: @id{u_id}({name} {last})\n{event.obj.text}',
                #                reversed=True))
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if u_id not in self.base.keys():
            self.base.update({u_id: [name, last, 'Ns', 0]})
            self.stat['users'] = self.stat.get('users', 0) + 1
            write_base(self.base, self.stat)
            self.send_msg(u_id, f'–ü—Ä–∏–≤–µ—Ç, {name}! –î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –±–æ—Ç–∞ –ø–æ–¥ —Ç–µ–±—è. –¢–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ '
                                f'—É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –∫–ª–∞—Å—Å')
            self.send_msg(cst.console_id, f'‚úÖ –ù–æ–≤—ã–π —é–∑–µ—Ä!\n–í—Å—Ç—Ä–µ—á–∞–π—Ç–µ - @id{u_id}({name} {last})')
            Keyboards(self.vk_api).class_keyboard(u_id)
        else:
            # –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞:
            if (msg in ['5', '6', '7', '8', '9', '10', '11']) and (self.base[u_id][3] == 0):
                self.base[u_id][2] = msg
                self.base[u_id][3] = 1
                write_base(self.base, self.stat)
                if msg in ['5', '10', '11']:
                    Keyboards(self.vk_api).litera_keyboard(u_id, True)
                else:
                    Keyboards(self.vk_api).litera_keyboard(u_id, False)
            # –í—ã–±–æ—Ä –ª–∏—Ç–µ—Ä—ã:
            elif (msg in '–∞–±–≤–≥') and (self.base[u_id][3] == 1):
                self.base[u_id][2] += msg
                self.base[u_id][3] = 2
                write_base(self.base, self.stat)
                self.send_msg(u_id,
                              f'–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ {self.base[u_id][2].upper()} –∫–ª–∞—Å—Å!\n'
                              f'–≠—Ç–æ—Ç –≤—ã–±–æ—Ä –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö')
                Keyboards(self.vk_api).menu_keyboard(u_id)
            # –ü–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–µ–∑ –∫–ª–∞—Å—Å–∞:
            elif msg == '–±–µ–∑ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞':
                self.base[u_id][2] = ''
                self.base[u_id][3] = 2
                write_base(self.base, self.stat)
                self.send_msg(u_id, 'üôÅ–ë–µ–∑ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ –Ω–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª. –ù–æ '
                                    '–µ–≥–æ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö üòâ')
                Keyboards(self.vk_api).menu_keyboard(u_id, False)
            elif self.base[u_id][3] == 2:
                user_class = self.base[u_id][2].upper()
                if msg == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
                    self.stat['requests'] = self.stat.get('requests', 0) + 1
                    write_base(self.base, self.stat)
                    if path.exists(f'uploaded_photo/{get_schedule_date()}.sf'):
                        self.load_schedule()
                        self.send_attachment(u_id, f'–î–µ—Ä–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ {user_class} –∫–ª–∞—Å—Å–∞ –Ω–∞ '
                                                   f'{get_schedule_date()} '
                                                   f'{cst.smiles_answer[randint(0, 13)]}',
                                             self.schedules[user_class])
                    else:
                        self.send_msg(u_id, f'–°–µ–π—á–∞—Å –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ '
                                            f'{get_schedule_date()}\n–ü—Ä–∏–¥–µ—Ç—Å—è —á—É—Ç—å-—á—É—Ç—å '
                                            f'–ø–æ–¥–æ–∂–¥–∞—Ç—å...\n–ï—Å–ª–∏ '
                                            f'–ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 20 '
                                            f'—Å–µ–∫—É–Ω–¥ '
                                            f'- —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤—Å–µ –∏–¥–µ—Ç –ø–æ –ø–ª–∞–Ω—É! '
                                            f'{cst.smiles_answer[randint(0, 13)]}')
                        download_all()
                        self.load_schedule()
                        try:
                            self.send_attachment(u_id, f'–î–µ—Ä–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ {user_class} –∫–ª–∞—Å—Å–∞ –Ω–∞ '
                                                       f'{get_schedule_date()} '
                                                       f'{cst.smiles_answer[randint(0, 13)]}',
                                                 self.schedules[user_class])
                        except:
                            self.send_msg(u_id, cst.error)
                elif msg == '–æ–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
                    if path.exists(f'source/{get_schedule_date()}.png'):
                        self.send_photo(u_id, f'source/{get_schedule_date()}.png',
                                        f'–î–µ—Ä–∂–∏ –æ–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {get_schedule_date()} '
                                        f'{cst.smiles_answer[randint(0, 13)]}')
                    else:
                        try:
                            get_picture()
                            self.send_photo(u_id, f'source/{get_schedule_date()}.png',
                                            f'–î–µ—Ä–∂–∏ –æ–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {get_schedule_date()} '
                                            f'{cst.smiles_answer[randint(0, 13)]}')
                        except:
                            self.send_msg(u_id, cst.error)
                elif '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞' in msg:
                    try:
                        d, m = list(map(int, msg.lstrip('—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞').split('.')))
                        date = pendulum.date(pendulum.now().year, m, d).__format__('DD.MM.YYYY')
                        if path.exists(f'source/{date}.png'):
                            self.send_photo(u_id, f'source/{date}.png', f'–î–µ—Ä–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ '
                                                                        f'{date} '
                                            f'{cst.smiles_answer[randint(0, 13)]}')
                        else:
                            dates = '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –≤–∏–¥–µ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 20.10"\n\n–°–ø–∏—Å–æ–∫ ' \
                                    '–¥–∞—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: \n' + \
                                    ' | '.join([s[:-9] for s in listdir('source')])
                            self.send_msg(u_id, dates)
                    except:
                        self.send_msg(u_id, cst.error)
                elif ',' in msg and '.' in msg:
                    try:
                        cls, date = msg.split(',')
                        if cls.upper() in cst.classes:
                            d, m = list(map(int, date.split('.')))
                            date = pendulum.date(pendulum.now().year, m, d).__format__('DD.MM.YYYY')
                            if not path.exists(f'uploaded_photo/{date}.sf'):
                                download_all(date)
                                with open(f'uploaded_photo/{date}.sf', 'rb') as f:
                                    self.schedules = load(f)
                                self.send_attachment(u_id, f'–î–µ—Ä–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ {cls.upper} –∫–ª–∞—Å—Å–∞ –Ω–∞ '
                                                           f'{date} {cst.smiles_answer[randint(0, 13)]}',
                                                     self.schedules[cls.upper()])
                            else:
                                with open(f'uploaded_photo/{date}.sf', 'rb') as f:
                                    self.schedules = load(f)
                                self.send_attachment(u_id, f'–î–µ—Ä–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ {cls.upper()} –∫–ª–∞—Å—Å–∞ –Ω–∞ '
                                                           f'{date} {cst.smiles_answer[randint(0, 13)]}',
                                                     self.schedules[cls.upper()])
                        else:
                            self.send_msg(u_id, f'–í—Ä—è–¥ –ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ {cls} –∫–ª–∞—Å—Å–∞...')
                    except FileNotFoundError:
                        cls, date = msg.split(',')
                        dates = '–°–ø–∏—Å–æ–∫ –¥–∞—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: \n' + \
                                ' | '.join([s[:-9] for s in listdir('source')])
                        self.send_msg(u_id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –Ω–∞—Å –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ {date}\n\n'
                                            f'{dates}')
                    except KeyError:
                        cls, date = msg.split(',')
                        dates = '–°–ø–∏—Å–æ–∫ –¥–∞—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: \n' + \
                                ' | '.join([s[:-9] for s in listdir('source')])
                        self.send_msg(u_id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –Ω–∞—Å –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è {cls} –∫–ª–∞—Å—Å–∞ –Ω–∞ '
                                            f'{date}\n\n{dates}')
                    except ValueError:
                        dates = '–°–ø–∏—Å–æ–∫ –¥–∞—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: \n' + \
                                ' | '.join([s[:-9] for s in listdir('source')])
                        self.send_msg(u_id, f'–û—à–∏–±–∫–∞! –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–ª–∏ '
                                            f'–¥–∞—Ç—É\n\n{dates}')
                elif msg.replace(' ', '').replace('"', '').upper() in cst.classes:
                    cls = msg.replace(' ', '').replace('"', '').upper()
                    self.stat['requests'] = self.stat.get('requests', 0) + 1
                    write_base(self.base, self.stat)
                    if path.exists(f'uploaded_photo/{get_schedule_date()}.sf'):
                        self.load_schedule()
                        self.send_attachment(u_id, f'–î–µ—Ä–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ {cls} –∫–ª–∞—Å—Å–∞ –Ω–∞ '
                                                   f'{get_schedule_date()} '
                                                   f'{cst.smiles_answer[randint(0, 13)]}',
                                             self.schedules[cls])
                    else:
                        self.send_msg(u_id, f'–°–µ–π—á–∞—Å –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ '
                                            f'{get_schedule_date()}\n–ü—Ä–∏–¥–µ—Ç—Å—è —á—É—Ç—å-—á—É—Ç—å '
                                            f'–ø–æ–¥–æ–∂–¥–∞—Ç—å...\n–ï—Å–ª–∏ '
                                            f'–ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 20 '
                                            f'—Å–µ–∫—É–Ω–¥ '
                                            f'- —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –≤—Å–µ –∏–¥–µ—Ç –ø–æ –ø–ª–∞–Ω—É! '
                                            f'{cst.smiles_answer[randint(0, 13)]}')
                        download_all()
                        self.load_schedule()
                        try:
                            self.send_attachment(u_id, f'–î–µ—Ä–∂–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ {cls} –∫–ª–∞—Å—Å–∞ –Ω–∞ '
                                                       f'{get_schedule_date()} '
                                                       f'{cst.smiles_answer[randint(0, 13)]}',
                                                 self.schedules[cls])
                        except:
                            self.send_msg(u_id, cst.error)
                elif msg == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤':
                    ring_schedule(self.vk_api, u_id)
                elif msg == '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏':
                    Keyboards(self.vk_api).service_keyboard(u_id)
                elif msg == '–ø–æ–º–æ—â—å':
                    self.send_msg(u_id, '–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—Ä–æ—Å—å–±—É –æ –ø–æ–º–æ—â–∏ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É! –ï—Å–ª–∏ '
                                        '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–µ –∑–∞–±—Ä–∞–ª–∏ –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–µ, –æ–Ω–∏ —Å–∫–æ—Ä–æ '
                                        '—Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏!\n–ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ FAQ: vk.com/@scheduleflow-faq-moi-faq')
                    self.vk_api.messages.send(user_ids=cst.admins,
                                              message=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @id{u_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å!'
                                                      f'\nvk.com/gim187161295?sel={u_id}',
                                              random_id=get_random_id())
                elif msg == '—Å–º–µ–Ω–∏—Ç—å –∫–ª–∞—Å—Å':
                    Keyboards(self.vk_api).class_keyboard(u_id)
                    self.base[u_id][3] = 0
                elif msg == '–Ω–∞–∑–∞–¥':
                    Keyboards(self.vk_api).menu_keyboard(u_id)
                elif smile(msg):
                    self.send_msg(u_id, cst.smiles_answer[randint(0, 13)])
                elif gratitude(msg):
                    self.stat['thank'] = self.stat.get('thank', 0) + 1
                    self.send_msg(u_id, cst.answers[randint(0, len(cst.answers) - 1)])
                elif '–¥–∞—Ä–æ–≤–∞' in msg:
                    self.send_msg(u_id, '–ù—É –¥–∞—Ä–æ–≤–∞, –∫–∞—Ä–æ–≤–∞')
                else:
                    if randint(0, 150) >= 50:
                        self.send_msg(u_id, cst.uni[randint(0, len(cst.uni) - 1)])
                    else:
                        self.vk_api.messages.markAsRead(peer_id=u_id)

    def send_console(self, message):
        self.vk_api.messages.send(peer_id=cst.console_id,
                                  message=message,
                                  random_id=get_random_id())

    def set_activity(self, uid):
        self.vk_api.messages.setActivity(type='typing',
                                         peer_id=uid,
                                         group_id=cst.group_id)

    def send_msg(self, send_id, message):
        self.vk_api.messages.send(peer_id=send_id,
                                  message=message,
                                  random_id=get_random_id())

    def user_get(self, uid):
        info = self.vk_api.users.get(user_ids=uid)[0]
        return info['first_name'], info['last_name']

    def send_photo(self, send_id, root='img.png', msg=''):
        self.upload = VkUpload(self.vk)
        response = self.upload.photo_messages(root)[0]
        attachment = f'photo{response["owner_id"]}_{response["id"]}_{response["access_key"]}'
        self.vk_api.messages.send(peer_id=send_id,
                                  message=msg,
                                  random_id=get_random_id(),
                                  attachment=attachment)

    def send_attachment(self, send_id, msg, attachment):
        self.vk_api.messages.send(peer_id=send_id,
                                  message=msg,
                                  random_id=get_random_id(),
                                  attachment=attachment)

    def load_schedule(self):
        with open(f'uploaded_photo/{get_schedule_date()}.sf', 'rb') as f:
            self.schedules = load(f)
